import numpy as np
from scipy.optimize import milp, LinearConstraint, Bounds

def main_scipy():
    M = np.array([500,700,600,300,900,1200,500])
    R = np.array([100,300,200,400,100,500,400])
    n = 7
    c = np.array([
         0,0,0,0,0,0,0,
        -1,-1,-1,-1,-1,-1,-1,
         0,0,0,0,0,0,0
    ])
    A = np.array([
        [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,-500,0,0,0,0,0,0],
        [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,-700,0,0,0,0,0],
        [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,-600,0,0,0,0],
        [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,-300,0,0,0],
        [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,-900,0,0],
        [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1200,0],
        [0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,-500],
        [-100,0,0,0,0,0,0,500,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,-300,0,0,0,0,0,0,700,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,-200,0,0,0,0,0,0,600,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,-400,0,0,0,0,0,0,300,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,-100,0,0,0,0,0,0,900,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,-500,0,0,0,0,0,0,1200,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,-400,0,0,0,0,0,0,500,0,0,0,0,0,0,0],
        [100,0,0,0,0,0,0,-500,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,300,0,0,0,0,0,0,-700,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,200,0,0,0,0,0,0,-600,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,400,0,0,0,0,0,0,-300,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,100,0,0,0,0,0,0,-900,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,500,0,0,0,0,0,0,-1200,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,400,0,0,0,0,0,0,-500,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,-1,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,1,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,1,0,0,0]
    ])
    b = np.array([
        3000,
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        499,699,599,299,899,1199,499,
        1,
        0,0,
        0
    ])
    bounds_list = [
        (0,M[0]),(0,M[1]),(0,M[2]),(0,M[3]),(0,M[4]),(0,M[5]),(0,M[6]),
        (0,R[0]),(0,R[1]),(0,R[2]),(0,R[3]),(0,R[4]),(0,R[5]),(0,R[6]),
        (0,1),(0,1),(0,1),(0,1),(0,1),(0,1),(0,1)
    ]
    lb = np.array([bnd[0] for bnd in bounds_list])
    ub = np.array([bnd[1] for bnd in bounds_list])
    bounds_obj = Bounds(lb, ub)
    integrality = np.ones(21, dtype=int)
    cons = LinearConstraint(A, np.full(A.shape[0], -np.inf), b)
    res = milp(c=c, integrality=integrality, bounds=bounds_obj, constraints=cons)
    if res.success:
        sol = res.x
        print("z =", -res.fun)
        for i in range(n):
            x_val = sol[i]
            z_val = sol[n+i]
            y_val = sol[2*n+i]
            print(f"p{i+1}: I = {x_val} c, P = {z_val} c, y = {y_val}")
        total_profit = -res.fun
        print(f"\n money = {total_profit} c (${total_profit/100:.2f})")
    else:
        print("All bad no good", res.message)

if __name__ == "__main__":
    main_scipy()
