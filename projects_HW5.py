import numpy as np
from scipy.optimize import milp, LinearConstraint, Bounds

def main_scipy():
    c = np.array([
        -9000, -13800, -5000, -6800, -11300, -8280,
         800,   500,    600,   700,    800,    600, 400, 500, 400, 500
    ])
    A_workload = np.array([
        [1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0],
        [0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0],
        [0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
        [1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
        [1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0],
        [0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
        [1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0],
        [0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0],
        [0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0]
    ])
    b_workload = np.array([2]*10)
    A_link = np.array([
        [1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0],
        [1,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0],
        [1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0],
        [1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0],
        [0,1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0],
        [0,1,0,0,0,0,0,0,-1,0,0,0,0,0,0,0],
        [0,1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0],
        [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1],
        [0,0,1,0,0,0,-1,0,0,0,0,0,0,0,0,0],
        [0,0,1,0,0,0,0,0,0,0,0,-1,0,0,0,0],
        [0,0,1,0,0,0,0,0,0,0,0,0,0,-1,0,0],
        [0,0,1,0,0,0,0,0,0,0,0,0,0,0,-1,0],
        [0,0,0,1,0,0,0,-1,0,0,0,0,0,0,0,0],
        [0,0,0,1,0,0,0,0,-1,0,0,0,0,0,0,0],
        [0,0,0,1,0,0,0,0,0,0,-1,0,0,0,0,0],
        [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,-1],
        [0,0,0,0,1,0,-1,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,1,0,0,0,0,0,0,-1,0,0,0,0],
        [0,0,0,0,1,0,0,0,0,0,0,0,-1,0,0,0],
        [0,0,0,0,1,0,0,0,0,0,0,0,0,0,-1,0],
        [0,0,0,0,0,1,0,-1,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,1,0,0,0,-1,0,0,0,0,0,0],
        [0,0,0,0,0,1,0,0,0,0,0,0,0,-1,0,0],
        [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,-1]
    ])
    b_link = np.zeros(24)
    A_ub = np.vstack((A_workload, A_link))
    b_ub = np.concatenate((b_workload, b_link))
    constraints = LinearConstraint(A_ub, -np.inf*np.ones(A_ub.shape[0]), b_ub)
    bounds_obj = Bounds(np.zeros(16), np.ones(16))
    integrality = np.ones(16, dtype=int)
    res = milp(c=c, integrality=integrality, bounds=bounds_obj, constraints=constraints)
    if res.success:
        sol = res.x
        net_revenue = -res.fun
        print("z =", net_revenue)
        required_employees = [
            [0,3,4,7],
            [1,2,6,9],
            [0,5,7,8],
            [1,2,4,9],
            [0,5,6,8],
            [1,3,7,9]
        ]
        for emp in range(10):
            proj_list = []
            for proj in range(6):
                if emp in required_employees[proj] and sol[proj] > 0.5:
                    proj_list.append(proj+1)
            print(f"E{emp+1} to projects: {proj_list}")
    else:
        print("All bad no good", res.message)

if __name__ == "__main__":
    main_scipy()
